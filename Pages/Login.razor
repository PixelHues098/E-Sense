@page "/login"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using BlazorApp.Models
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Class="rounded-lg" >

        <div class="d-flex justify-center">
            <MudImage Fluid="true" Src="images/logo2.png" Width="332" Height="180" Alt="E-Sense Logo" Elevation="0"
                Class="rounded-lg" />
        </div>
        <MudDivider />
        <MudContainer Class="pt-9 pb-5 px-16 d-flex flex-column gap-4">
            <MudTextField @bind-Value="Email" Label="Email" Variant="Variant.Outlined" Required="true"
                    RequiredError="An Email is required!"
                    Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is required to continue"})"/>
            <MudTextField @bind-Value="Password" @ref="pwField1"
                    Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput"
                    Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                    RequiredError="Password is required!" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                    OnAdornmentClick="ShowHidePassClick" AdornmentAriaLabel="Show Password" />
            <div Class="mb-5">
                <MudButton Variant="Variant.Text" Color="Color.Primary">
                    Forgot password?
                </MudButton>
            </div>

            <MudButton Class="mr-16 ml-16 mb-6 rounded-pill" Disabled="@(!success)" Variant="Variant.Filled" Color="Color.Primary"
                Size="Size.Large" OnClick="@OnLoginClick">Login</MudButton>
            <MudText Align="Align.Center">
                Not a member?
                <MudButton Class="mr-1" Href="signup" Variant="Variant.Text" Color="Color.Primary"> Sign up </MudButton>

            </MudText>

        </MudContainer>

    </MudPaper>
</MudContainer>
</MudForm>
@code {

    public string Email { get; set; } = string.Empty;
    public string Password { get; set; } = string.Empty;

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ShowHidePassClick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private bool success;
    string[] errors = { };
    private MudTextField<string>? pwField1;
    private MudForm? form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
    }

    async void OnLoginClick()
    {
        var userToLogin = new User
        {
            Email = Email,
            Password = Password
        };

        await Http.PostAsJsonAsync("http://localhost:8080/auth/login-user", userToLogin);
    }
}

@* Codes *@
