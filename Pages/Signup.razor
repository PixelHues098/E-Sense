@page "/signup"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using BlazorApp.Models
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudPaper Class="rounded-lg">

            <MudContainer Class="pt-10 pb-6 px-10">
                <MudText Typo="Typo.h4">Sign Up</MudText>
                <MudText Align="Align.Left" Class="grey-text">
                    Please fill in this form to create an account
                </MudText>
            </MudContainer>

            <MudDivider />

            <MudContainer Class="pt-6 pb-10 px-10 d-flex flex-column gap-4">

                <div class="d-flex justify-space-between flex-grow-1 gap-4">
                    <MudTextField @bind-Value="FirstName" Label="First Name" Variant="Variant.Outlined"
                        Class="flex-auto flex-grow-1" Required="true" RequiredError="First Name is required!" />
                    <MudTextField @bind-Value="LastName" Label="Last Name" Variant="Variant.Outlined"
                        Class="flex-auto flex-grow-1" Required="true" RequiredError="Last Name is required!" />
                </div>

                <MudTextField @bind-Value="Username" Label="Username" Variant="Variant.Outlined"
                    Required="true" RequiredError="Username is required!" />
                <MudTextField @bind-Value="Email" Label="Email" Variant="Variant.Outlined" Required="true"
                    RequiredError="An Email is required!"
                    Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid "})" />
                <MudTextField @bind-Value="Password" HelperText="Choose a strong password" Label="Password"
                    Variant="Variant.Outlined" InputType="@PasswordInput"
                    Validation="@(new Func<string, IEnumerable<string>>(FormHelper.CheckPasswordStrength))" Required="true"
                    RequiredError="Password is required!" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                    OnAdornmentClick="ShowHidePassClick" AdornmentAriaLabel="Show Password" />
                <MudTextField @bind-Value="ConfirmPassword" HelperText="Repeat the password" Label="Confirm Password"
                    Required="true" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End"
                    AdornmentIcon="@PasswordInputIcon" Validation="@(new Func<string, string>(PasswordMatch))"
                    OnAdornmentClick="ShowHidePassClick" AdornmentAriaLabel="Show Password" />
                <MudCheckBox @bind-Checked="@DidAcceptTermsPolicy" T="bool" Required="true"
                    RequiredError="Please accept the Terms of Use & Privacy Policy to continue"
                    Label="I accept the Terms of Use & Privacy Policy" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Size="Size.Large"
                    OnClick="@OnRegisterClick">Sign Up</MudButton>

            </MudContainer>

        </MudPaper>
    </MudContainer>
</MudForm>

@code {
    string FirstName { get; set; } = string.Empty;
    string LastName { get; set; } = string.Empty;
    string Username { get; set; } = string.Empty;
    string Email { get; set; } = string.Empty;
    string Password { get; set; } = string.Empty;
    string ConfirmPassword { get; set; } = string.Empty;
    bool DidAcceptTermsPolicy { get; set; } = false;

    bool isPasswordShown;
    bool success;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    string[] errors = { };

    InputType PasswordInput = InputType.Password;
    private MudForm? form;

    // show or hides password when eye icon (adornment) is clicked
    void ShowHidePassClick()
    {
        if (isPasswordShown)
        {
            isPasswordShown = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isPasswordShown = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private string PasswordMatch(string confirmPassword)
    {
        if (!FormHelper.IsPasswordMatch(Password, confirmPassword))
            return "Passwords don't match";
        return null!;
    }

    async void OnRegisterClick()
    {
        var userToRegister = new User
        {
            FirstName = FirstName,
            LastName = LastName,
            Username = Username,
            Email = Email,
            Password = Password
        };

        await Http.PostAsJsonAsync("http://localhost:8080/auth/register-user", userToRegister);
    }
}